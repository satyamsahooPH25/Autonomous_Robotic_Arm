import cv2
import time
from ultralytics import YOLO
import serial.tools.list_ports
ports=serial.tools.list_ports.comports()
serialinst= serial.Serial()
portsList=[]
portvar="COM"
for oneport in ports:
    portsList.append(str(oneport))
    print(str(oneport))
val=input("Select Port:COM")
for x in range(0,len(portsList)):
    if portsList[x].startswith("COM"+str(val)):
        portvar+=str(val)
        print(portvar)

serialinst.baudrate=9600
serialinst.port=portvar
serialinst.open()

# Load the YOLOv8 model
model = YOLO(r"C:\Users\satya\Downloads\best.pt")

# Open the video file
video_path = "path/to/your/video/file.mp4"
cap = cv2.VideoCapture(1)
cap.set(3,256)
cap.set(4,256)
x0=0
y0=0
a=0
cx=0
cy=0

# Loop through the video frames
while True:
    bbox=[0,0,0,0]
    #print("hi")
    while cap.isOpened():
        # Read a frame from the video
        success, frame = cap.read()

        if success:
            # Run YOLOv8 inference on the frame
            results = model(frame)

            boxes = results[0].boxes
            for box in boxes: 
                b = box.xyxy[0]
                x=int(b[0])
                y=int(b[1])
                w=int(b[2])
                h=int(b[3])
                #print(x,y,w,h)
                x0=w-x
                y0=h-y
                
                if((x0*y0)>=a):
                    a=x0*y0
                    bbox=[x,y,w,h]
                    #print(bbox)
                #print(int(x),int(y))

            # Visualize the results on the frame
            annotated_frame = results[0].plot()
            #annotated_frame = cv2.circle(annotated_frame,(int(bbox[0]/2+bbox[2]/2),int(bbox[1]/3+bbox[3])/3), 20, (255,0,0), 2)

            # Display the annotated frame
            cv2.imshow("YOLOv8 Inference", annotated_frame)
            if(len(boxes)>0):
                    #tracker.init(frame,tuple(bbox))
                    #print(tuple(bbox))
                    break
            
                
            # Break the loop if 'q' is pressed
            if cv2.waitKey(1) & 0xFF == ord("q"):
                break
        else:
            # Break the loop if the end of the video is reached
            break
    '''cap.release()
    cv2.destroyAllWindows()
    cap = cv2.VideoCapture(0)'''

    while True:
                        success, frame = cap.read()
                        #success,bbox=tracker.update(frame)
                #cv2.imshow("YOLOv8 Inference", frame)
                        #print(bbox)
                        if success:
                            image = cv2.rectangle(frame, (int(bbox[0]),int(bbox[1])), (int(bbox[2]),int(bbox[3])),(255,0,0), 2)
                            image = cv2.circle(image,(int(bbox[0]/2+bbox[2]/2),int(bbox[1]/2+bbox[3]/2)), 20, (255,0,0), 2)
                            cx=int(bbox[0]/2+bbox[2]/2)
                            cy=int(bbox[1]/2+bbox[3]/2)
                            cv2.imshow("YOLOv8 Inference1", image)
                            if(cx>=1280)and(cy>=1280):
                                command="9"
                                print(command)
                                serialinst.write(command.encode('utf-8'))
                            elif(cx<=128)and(cy>=128):
                                command="10"
                                print(command)
                                serialinst.write(command.encode('utf-8'))
                            elif(cx<=128)and(cy<=128):
                                command="11"
                                print(command)
                                serialinst.write(command.encode('utf-8'))
                            elif(cx>=128)and(cy<=128):
                                command="12"
                                print(command)
                                serialinst.write(command.encode('utf-8')) 
                            '''command="55"
                            serialinst.write(command.encode('utf-8'))
                            command="0"
                            serialinst.write(command.encode('utf-8'))
                            command="35"
                            serialinst.write(command.encode('utf-8'))'''
                            
                            if cv2.waitKey(1) & 0xFF == ord("q"):
                                break
                            time.sleep(2)
                            break
                        
    a=0
    cx=0
    cy=0

# Release the video capture object and close the display window
cap.release()
cv2.destroyAllWindows(
)
